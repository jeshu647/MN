import tkinter as tk
import matplotlib.pyplot as plt
import numpy as np
import random
from PIL import Image, ImageDraw

# Create a gradient image with the desired colors
width, height = 400, 400
gradient = Image.new('RGB', (width, height), color=(255, 255, 255))
draw = ImageDraw.Draw(gradient)
draw.rectangle((0, 0, width, height), fill=(48, 239, 86), outline=None)
draw.rectangle((0, 0, width, height // 2), fill=(79, 236, 110), outline=None)

# Save the gradient image to a file
gradient.save('gradient.png')

# Define the data
user_labels = ['User1', 'User2', 'User3', 'User4', 'User5']
app_labels = ['Instagram', 'Spotify', 'Youtube', 'Outlook', 'Teams','Whatsapp']

# Define colors for the bars
user_colors = ['red', 'green', 'blue', 'orange', 'purple']
app_colors = ['purple', 'orange', 'blue', 'green', 'red','pink']

# Assign total bandwidth across all users
total_bandwidth = 500
user_bandwidths = [random.randint(0, total_bandwidth) for _ in range(len(user_labels))]
user_bandwidths[random.randint(0, len(user_bandwidths)-1)] = 0  # Set one user to be offline

app_bandwidths = [0.35, 0.15, 0.55, 0.015, 0.295, 0.10]

# Define a function to create the user bandwidth graph
def create_user_graph():
   
    # Create the graph
    plt.bar(user_labels, user_bandwidths, color=user_colors)
    plt.title('User Bandwidth Usage')
    plt.xlabel('User')
    plt.ylabel('Bandwidth Usage (MB)')
    plt.show()

    # Print the online/offline status of each user
    user_bandwidth = dict(zip(user_labels, user_bandwidths))
    for user, bandwidth in user_bandwidth.items():
        if bandwidth > 0:
            print(f"{user} is online. They use {bandwidth} MB of the total bandwidth ")
        else:
            print(f"{user} is offline with {bandwidth} MB bandwidth usage")

    # Increment the bandwidth usage of each online user by a factor of 5 and display the updated bandwidth usage
    increment_bandwidth()

# Define a function to increment the bandwidth usage of each online user by a factor of 5 and display the updated bandwidth usage
def increment_bandwidth():
    for i, bandwidth in enumerate(user_bandwidths):
        if bandwidth > 0:
            user_bandwidths[i] += 5 * bandwidth
            print(f"{user_labels[i]} bandwidth usage after incrementing by 5 times: {user_bandwidths[i]} MB")

# Define a function to create the app bandwidth graph
def create_app_graph():
    # Create the graph
    plt.bar(app_labels, app_bandwidths, color=user_colors)
    plt.title('App Bandwidth Usage')
    plt.xlabel('App')
    plt.ylabel('Bandwidth Usage (MB)')
    plt.show()

# Define a function to create the GUI window
def create_gui():
    # Create the window
    root = tk.Tk()
    root.title('Bandwidth Usage')
    root.geometry("400x400")
    
    # Load the gradient image and set it as the background of the window
    gradient_image = tk.PhotoImage(file='gradient.png')
    background_label = tk.Label(root, image=gradient_image)
    background_label.place(x=0, y=0, relwidth=1, relheight=1)
 
    # Set the gradient background color
    gradient = ['#ff5f6d', '#ffc371']
    for i in range(400):
        root.configure(background=gradient[int(i/200)])
        root.update()
    
    # Create a button for the user bandwidth graph
    user_button = tk.Button(root, text='User Bandwidth', bg='yellow', command=create_user_graph)
    user_button.place(relx=0.5, rely=0.4, anchor=tk.CENTER)
    
    # Create a button for the app bandwidth graph
    app_button = tk.Button(root, text='App Bandwidth', bg='light blue', command=create_app_graph)
    app_button.place(relx=0.5, rely=0.6, anchor=tk.CENTER)

    # Run the window
    root.mainloop()

# Call the function to create the GUI window
create_gui()

